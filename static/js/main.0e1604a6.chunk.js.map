{"version":3,"sources":["componenets/Navigation.js","componenets/Sticky.js","componenets/StickyMenu.js","componenets/Banner.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","href","useState","isSticky","setSticky","ref","useRef","handleScroll","current","getBoundingClientRect","top","useEffect","window","addEventListener","removeEventListener","Sticky","Banner","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","centerMode","centerPadding","React","Component","App","StickyMenu","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAoBeA,MAlBf,WACC,OACC,yBAAKC,UAAU,cACd,4BACC,4BAAI,uBAAGC,KAAK,KAAR,8BACJ,4BAAI,uBAAGA,KAAK,KAAR,kBACJ,4BAAI,uBAAGA,KAAK,KAAR,kBACJ,4BAAI,uBAAGA,KAAK,KAAR,kBACJ,4BAAI,uBAAGA,KAAK,KAAR,kBACJ,4BAAI,uBAAGA,KAAK,KAAR,8BACJ,4BAAI,uBAAGA,KAAK,KAAR,8BACJ,4BAAI,uBAAGA,KAAK,KAAR,wBACJ,4BAAI,uBAAGA,KAAK,KAAR,iCCXO,oBAAM,wBAAID,UAAU,gBAAe,kBAAC,EAAD,QCCnC,aAAO,IAAD,EACWE,oBAAS,GADpB,mBACZC,EADY,KACFC,EADE,KAEbC,EAAMC,iBAAO,MACbC,EAAe,WACnBH,EAAUC,EAAIG,QAAQC,wBAAwBC,KAAO,IAWvD,OARAC,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,SAAUN,GAE3B,WACLK,OAAOE,oBAAoB,UAAU,kBAAMP,QAE5C,IAGD,kBAAC,WAAD,KACE,yBAAKP,UAAS,wBAAmBG,EAAW,UAAY,IAAME,IAAKA,GACjE,kBAACU,EAAD,S,iBCyBOC,G,mLA5BX,OACC,yBAAKhB,UAAU,cACd,wBAAIA,UAAU,SAAd,sDACC,kBAAC,IAAD,iBAdY,CAChBiB,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,QAAQ,EACRC,YAAY,EACZC,cAAe,QAMX,CAAsBxB,UAAU,WAC9B,yBAAKA,UAAU,cACb,kCAEF,yBAAKA,UAAU,cACb,kCAEF,yBAAKA,UAAU,cACb,kCAEF,yBAAKA,UAAU,cACb,kCAEF,yBAAKA,UAAU,cACb,kCAEF,yBAAKA,UAAU,cACb,wC,GAjCUyB,IAAMC,YCqBZC,G,6KAfX,OACE,6BACE,kBAAC,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZUH,IAAMC,Y,MCGJG,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e1604a6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Navigation() {\n\treturn (\n\t\t<nav className=\"navigation\">\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"#\">#빨간날엔</a></li>\n\t\t\t\t<li><a href=\"#\">#맛집</a></li>\n\t\t\t\t<li><a href=\"#\">#쇼핑</a></li>\n\t\t\t\t<li><a href=\"#\">#여행</a></li>\n\t\t\t\t<li><a href=\"#\">#골프</a></li>\n\t\t\t\t<li><a href=\"#\">#생활구독</a></li>\n\t\t\t\t<li><a href=\"#\">#생활구독</a></li>\n\t\t\t\t<li><a href=\"#\">#핀테크</a></li>\n\t\t\t\t<li><a href=\"#\">#맞춤카드</a></li>\n\t\t\t</ul>\n\t\t</nav>\n\t);\n};\n\nexport default Navigation;","import React from 'react';\nimport Navigation from \"./Navigation\";\n\nexport default () => <h1 className=\"sticky-inner\"><Navigation /></h1>;","import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport Sticky from './Sticky';\n\n\nexport default () => {\n  const [isSticky, setSticky] = useState(false);\n  const ref = useRef(null);\n  const handleScroll = () => {\n    setSticky(ref.current.getBoundingClientRect().top <= 0);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', () => handleScroll);\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <div className={`sticky-wrapper${isSticky ? ' sticky' : ''}`} ref={ref}>\n        <Sticky />\n      </div>\n    </Fragment>\n  );\n}","import React from 'react';\nimport Slider from \"react-slick\";\n\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nclass Banner extends React.Component {\n\trender() {\n\t\tconst settings = {\n\t\t\tdots: false,\n\t\t\tinfinite: false,\n\t\t\tspeed: 500,\n\t\t\tslidesToShow: 1,\n\t\t\tslidesToScroll: 1,\n\t\t\tarrows: false,\n\t\t\tcenterMode: true,\n\t\t\tcenterPadding: '20px'\n\t\t}\n\n    return (\n    \t<div className=\"banner-set\">\n\t    \t<h3 className=\"title\">이달의 #추천여행지</h3>\n\t      <Slider {...settings} className=\"banner\">\n\t        <div className=\"slick-item\">\n\t          <h3>1</h3>\n\t        </div>\n\t        <div className=\"slick-item\">\n\t          <h3>2</h3>\n\t        </div>\n\t        <div className=\"slick-item\">\n\t          <h3>3</h3>\n\t        </div>\n\t        <div className=\"slick-item\">\n\t          <h3>4</h3>\n\t        </div>\n\t        <div className=\"slick-item\">\n\t          <h3>5</h3>\n\t        </div>\n\t        <div className=\"slick-item\">\n\t          <h3>6</h3>\n\t        </div>\n\t      </Slider>\n      </div>\n    );\n\t}\n}\n\nexport default Banner;\n","import React from 'react';\n// import { StickyContainer, Sticky } from 'react-sticky';\nimport StickyMenu from './componenets/StickyMenu';\n\nimport Banner from \"./componenets/Banner\";\n\n\nimport './App.scss';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <Banner />\n        <StickyMenu />\n        <Banner />\n        <Banner />\n        <Banner />\n        <Banner />\n        <Banner />\n        <Banner />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}